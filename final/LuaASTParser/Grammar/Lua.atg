using ASTClass;

COMPILER Lua

public AST astRoot;

CHARACTERS
  letter  = 'A'..'Z' + 'a'..'z' .
  digit  = '0'..'9' .
  tab        = '\t'.
  cr         = '\r'.
  lf         = '\n'.
  notQuote   = ANY - '"' - "\r\n".
  newLine    = cr + lf.

TOKENS
  ident = letter { letter | digit | "_" } .
  number = digit { digit } .
  string   = '"' {notQuote} '"'.        // no check for valid escape sequences
  
  // ignoring goto
  if = "if".
  then = "then".
  else = "else".
  elseif = "elseif".
  end = "end".
  function = "function".
  local = "local".
  return = "return".
  while = "while".
  do = "do".
  for = "for".
  in = "in".
  repeat = "repeat".
  until = "until".
  break = "break".
  and = "and".
  or = "or".
  not = "not".
  true = "true".
  false = "false".
  nil = "nil".
  comma     = ','.
  semicolon = ';'.
  colon     = ':'.
  lpar      = '('.
  rpar      = ')'.
  lbrack    = '['.
  rbrace    = '}'.
  ellipsis  = "...".
  multipy = '*'.
  divide = '\\'.
  add = '+'.
  subtract = '-'.

// ignoring multi-line comments because CoCo/R doesn't allow delimiters as long as 4 like "--[["
COMMENTS FROM "--" TO lf

IGNORE tab + cr + lf + ' '

PRODUCTIONS

Lua
(. 
astRoot = new AST(null, "Lua"); 
.)
= 
Program<astRoot> . 

Program<AST parent>
(.
  AST node = new AST (parent, "Program");
.)
=
  Statement<node> 
.

Ident<AST parent> =
  ident (. new TerminalAST(parent, "Ident", t.val); .)
.

Number<AST parent> =
  number (. new TerminalAST(parent, "Number", t.val); .)
.

Statement<AST parent> 
(. 
AST node = new AST(parent, "Statement"); 
.)
= 
  SimpleStatement<node> 
  /*| IfStatement<node>*/
  /*| WhileStatement<node>*/
  | FunctionDecl<node>
  | LocalAssignment<node>
.

SimpleStatement<AST parent> 
(. 
AST node = new AST(parent, "SimpleStatement"); 
.)
=
  Ident<node> (
      AssignmentTail<node>
    | FunctionCallTail<node>
  ) .

AssignmentTail<AST parent> =
(. 
AST node = new AST(parent, "AssignmentTail"); 
parent.AddOp(Operator.Assign);
.)
  '=' Expression<node> 
.

FunctionCallTail<AST parent> 
(.
AST node = new AST(parent, "FunctionCallTail");
.)
=
  lpar [ ArgList<node> ] rpar 
 .

LocalAssignment<AST parent>
(.
    AST node = new AST(parent, "LocalAssignment");
    TerminalAST terminal = null;
.)
=
local Ident<node> (. terminal = new TerminalAST(node, "Identifier", t.val); .)
    [ 
        '=' Expression<node> 
    ]
.

/*
IfStatement<AST parent> =
  if Expression<AST cond> then
  (.
    node = new AstBranch("If");
    ((AstBranch)node).Add(cond);
    AST thenBlock = new AstBranch("Then");
    AST temp;
  .)
  (. Statement<temp> { ((AstBranch)thenBlock).Add(temp); } .)
  (.
    ((AstBranch)node).Add(thenBlock);
  .)
  [ else (.
    AST elseBlock = new AstBranch("Else");
    { Statement<temp> { ((AstBranch)elseBlock).Add(temp); } }
    ((AstBranch)node).Add(elseBlock);
  .)]
  end
.
*/

/*
WhileStatement<AST parent> =
  while Expression<AST cond> do
  (.
    node = new AstBranch("While");
    ((AstBranch)node).Add(cond);
    AST body = new AstBranch("Body");
    AST temp;
  .)
  (. Statement<temp> { ((AstBranch)body).Add(temp); } .)
  (.
    ((AstBranch)node).Add(body);
  .)
  end
.
*/

FunctionDecl<AST parent> 
 (.
    AST node = new AST(parent, "FunctionDecl");
    TerminalAST terminal = null;
 .)
=
 function Ident<node> (. terminal = new TerminalAST(node, "Identifier", t.val); .)
 lpar [ ParamList<node> ] rpar
 Statement<node>
 end
.

ParamList<AST parent> 
(. 
    AST node = new AST(parent, "ParamList");
    TerminalAST terminal = null;
.)
=
  Ident<node> (. terminal = new TerminalAST(node, "Param", t.val); .)
  {
    comma Ident<node> (. terminal = new TerminalAST(node, "Param", t.val); .)
  }
 .

ArgList<AST parent> =
(. 
    AST node = new AST(parent, "ArgList");
    TerminalAST terminal = null;
.)
    Expression<node> (. terminal = new TerminalAST(node, "Arg", t.val); .)
    {
       comma Expression<node> (. terminal = new TerminalAST(node, "Arg", t.val); .)
    }
.

Expression<AST parent> 
(. 
    AST node = new AST(parent, "Expression");
    TerminalAST terminal = null;	
.)
= 
Term<node> 
.

Term<AST parent> 
(. 
    AST node = new AST(parent, "Term");
.)
=
    Factor<node>
.

Factor<AST parent> 
(. 
    AST node = new AST(parent, "Factor");
.)
=
  Number<node> (. node.AddChild(new TerminalAST(node, "Number", t.val)); .)
 | Ident<node> (. node.AddChild(new TerminalAST(node, "Identifier", t.val)); .)
 | FunctionCallTail<node>
 | lpar Expression<node> rpar
.

END Lua.

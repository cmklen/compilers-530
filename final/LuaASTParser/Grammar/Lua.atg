using ASTClass;

COMPILER Lua

public AST astRoot;

CHARACTERS
  letter  = 'A'..'Z' + 'a'..'z' .
  digit  = '0'..'9' .
  tab        = '\t'.
  cr         = '\r'.
  lf         = '\n'.
  notQuote   = ANY - '"' - "\r\n".
  newLine    = cr + lf.

TOKENS
  ident = letter { letter | digit | "_" } .
  number = digit { digit } .
  string   = '"' {notQuote} '"'.        // no check for valid escape sequences
  
  
  if = "if".
  then = "then".
  else = "else".
  elseif = "elseif".
  end = "end".
  function = "function".
  local = "local".
  while = "while".
  do = "do".
  return = "return".
  comma     = ','.
  semicolon = ';'.
  colon     = ':'.
  lpar      = '('.
  rpar      = ')'.
  lbrack    = '['.
  rbrace    = '}'.
  ellipsis  = "...".
  multipy = '*'.
  divide = '\\'.
  add = '+'.
  subtract = '-'.

  // ignoring these as I'm only implementing a subset
  goto = "goto".
  repeat = "repeat".
  until = "until".
  break = "break".
  and = "and".
  or = "or".
  not = "not".
  true = "true".
  false = "false".
  for = "for".
  in = "in".
  nil = "nil".

// ignoring multi-line comments because CoCo/R doesn't allow delimiters as long as 4 like "--[["
COMMENTS FROM "--" TO lf

IGNORE tab + cr + lf + ' '

PRODUCTIONS

Lua
(. 
astRoot = new AST(null, "Lua"); 
.)
= 
Program<astRoot> . 

Program<AST parent>
(.
  AST node = new AST (parent, "Program");
.)
=
  Block<node> 
.

Ident<AST parent> =
  ident (. new TerminalAST(parent, "Identifier", t.val); .)
.

Number<AST parent> =
  number (. new TerminalAST(parent, "Number", t.val); .)
.

String<AST parent> =
  string (. new TerminalAST(parent, "String", t.val); .)
  // the dot file doesn't like to visualize the string and will freak out
.

Block<AST parent> 
(. 
AST node = new AST(parent, "Block"); 
.)
= 
  SimpleBlock<node> 
  | IfBlock<node>
  | WhileBlock<node>
  | FunctionDecl<node>
  | LocalAssignment<node>
.

SimpleBlock<AST parent> 
(. 
AST node = new AST(parent, "SimpleBlock"); 
.)
=
  Ident<node> (
      AssignmentTail<node>
    | FunctionCallTail<node>
  ) .

TableDecl<AST parent> =
(. 
AST node = new AST(parent, "TableDecl"); 
.)
  '{' [ ArgList<node> ] '}'
.

AssignmentTail<AST parent> =
(. 
AST node = new AST(parent, "AssignmentTail"); 
parent.AddOp(Operator.Assign);
.)
  '=' Expression<node> 
.

FunctionCallTail<AST parent> 
(.
AST node = new AST(parent, "FunctionCallTail");
.)
=
  lpar [ ArgList<node> ] rpar 
 .

LocalAssignment<AST parent>
(.
    AST node = new AST(parent, "LocalAssignment");
    TerminalAST terminal = null;
.)
=
local Ident<node> (. terminal = new TerminalAST(node, "Identifier", t.val); .)
    [ 
        '=' Expression<node> 
    ]
.


IfBlock<AST parent> 
(. 
    AST node = new AST(parent, "IfStatement"); 
.)
=
    if Expression<node> then
        Block<node>
        {
            elseif Expression<node> then
            Block<node>
            (. node.AddChild(new AST(node, "ElseIfBranch")); .)
        }
        [ else
            Block<node>
            (. node.AddChild(new AST(node, "ElseBranch")); .)
        ]
    end
.


WhileBlock<AST parent>
(. 
    AST node = new AST(parent, "WhileBlock"); 
.)
=
    while Expression<node> do
        Block<node>
    end
.

FunctionDecl<AST parent> 
 (.
    AST node = new AST(parent, "FunctionDecl");
    TerminalAST terminal = null;
 .)
=
 function Ident<node> (. terminal = new TerminalAST(node, "Identifier", t.val); .)
 lpar [ ParamList<node> ] rpar
 [ Block<node> ]
 [ ReturnStatement<node> ]
 end
.

ReturnStatement<AST parent>
(. 
    AST node = new AST(parent, "ReturnStatement");
.)
=
    return [ Expression<node> ]
.

ParamList<AST parent> 
(. 
    AST node = new AST(parent, "ParamList");
    TerminalAST terminal = null;
.)
=
  Ident<node> (. terminal = new TerminalAST(node, "Param", t.val); .)
  {
    comma Ident<node> (. terminal = new TerminalAST(node, "Param", t.val); .)
  }
 .

ArgList<AST parent> =
(. 
    AST node = new AST(parent, "ArgList");
    TerminalAST terminal = null;
.)
    Expression<node>
    {
       comma Expression<node> (. terminal = new TerminalAST(node, "Arg", t.val); .)
    }
.

Expression<AST parent> 
(. 
    AST node = new AST(parent, "Expression");
    TerminalAST terminal = null;	
.)
= 
Factor<node>
.

Factor<AST parent> 
(. 
    AST node = new AST(parent, "Factor");
    TerminalAST terminal = null;
.)
=
   Number<node>
 | Ident<node>
 | FunctionCallTail<node>
 | lpar Expression<node> rpar
 | TableDecl<node>
 | String<node>
.

END Lua.

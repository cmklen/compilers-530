COMPILER Lua

CHARACTERS
  letter  = 'A'..'Z' + 'a'..'z' .
  digit  = '0'..'9' .
  tab        = '\t'.
  cr         = '\r'.
  lf         = '\n'.
  notQuote   = ANY - '"' - "\r\n".
  newLine    = cr + lf.

TOKENS
  ident = letter { letter | digit | "_" } .
  number = digit { digit } .
  string   = '"' {notQuote} '"'.        // no check for valid escape sequences
  
  // ignoring goto
  if = "if".
  then = "then".
  else = "else".
  elseif = "elseif".
  end = "end".
  function = "function".
  local = "local".
  return = "return".
  while = "while".
  do = "do".
  for = "for".
  in = "in".
  repeat = "repeat".
  until = "until".
  break = "break".
  and = "and".
  or = "or".
  not = "not".
  true = "true".
  false = "false".
  nil = "nil".
  comma     = ','.
	semicolon = ';'.
	colon     = ':'.
	lpar      = '('.
	rpar      = ')'.
	lbrack    = '['.
	rbrace    = '}'.
	ellipsis  = "...".
  AddOp = '+' | '-' .
  MulOp = '*' | '/' .

// ignoring multi-line comments because CoCo/R doesn't allow delimiters as long as 4 like "--[["
COMMENTS FROM "--" TO lf

IGNORE tab + cr + lf + ' '

PRODUCTIONS

Lua = { Statement } .

Statement =
  SimpleStatement
  | IfStatement
  | WhileStatement
  | FunctionDecl
  .

SimpleStatement =
    ident ( AssignmentTail | FunctionCallTail ) .

AssignmentTail = '=' Expression .
FunctionCallTail = lpar [ ArgList ] rpar .

IfStatement = if Expression then { Statement } [ else { Statement } ] end .

WhileStatement = while Expression do { Statement } end .

FunctionDecl = function ident lpar [ ParamList ] rpar { Statement } end .

ParamList = ident { comma ident } .

ArgList = Expression { comma Expression } .

Expression = Term { AddOp Term } .

Term = Factor { MulOp Factor } .

Factor =
    number
  | ident ( FunctionCallTail | )
  | lpar Expression rpar .

END Lua.
